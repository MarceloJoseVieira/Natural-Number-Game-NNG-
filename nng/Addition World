lemma zero_add (n : mynat) : 0 + n = n :=
begin
induction n with d hd,
rw add_zero,
refl,
rw add_succ,
rw hd,
refl,
end

lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=
begin
induction c with n hn,
rw add_zero,
rw add_zero,
refl,
rw add_succ,
rw add_succ,
rw add_succ,
rw hn,
refl,
end

lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=
begin
induction b with n hn,
rw add_zero,
rw add_zero,
refl,
rw add_succ,
rw add_succ,
rw hn,
refl,
end

lemma add_comm (a b : mynat) : a + b = b + a :=
begin
induction a with n hn,
rw add_zero,
rw zero_add,
refl,
rw add_succ,
rw succ_add,
rw hn,
refl,
end

theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=
begin
rw one_eq_succ_zero,
rw add_succ,
rw add_zero,
refl,
end

lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=
begin
induction c with n hn,
rw add_zero,
rw add_zero,
refl,
rw add_succ,
rw add_succ,
rw succ_add,
rw hn,
refl,
end
